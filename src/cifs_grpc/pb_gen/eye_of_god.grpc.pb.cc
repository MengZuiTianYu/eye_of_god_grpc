// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: eye_of_god.proto

#include "eye_of_god.pb.h"
#include "eye_of_god.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace eye_grpc {

static const char* IFS_SourceData_method_names[] = {
  "/eye_grpc.IFS_SourceData/Add",
  "/eye_grpc.IFS_SourceData/ImgFeature",
};

std::unique_ptr< IFS_SourceData::Stub> IFS_SourceData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IFS_SourceData::Stub> stub(new IFS_SourceData::Stub(channel));
  return stub;
}

IFS_SourceData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Add_(IFS_SourceData_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImgFeature_(IFS_SourceData_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IFS_SourceData::Stub::Add(::grpc::ClientContext* context, const ::eye_grpc::SourceData& request, ::eye_grpc::AddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void IFS_SourceData::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::eye_grpc::SourceData* request, ::eye_grpc::AddResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void IFS_SourceData::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eye_grpc::AddResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void IFS_SourceData::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::eye_grpc::SourceData* request, ::eye_grpc::AddResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

void IFS_SourceData::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eye_grpc::AddResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::eye_grpc::AddResponse>* IFS_SourceData::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::eye_grpc::SourceData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::eye_grpc::AddResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::eye_grpc::AddResponse>* IFS_SourceData::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::eye_grpc::SourceData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::eye_grpc::AddResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status IFS_SourceData::Stub::ImgFeature(::grpc::ClientContext* context, const ::eye_grpc::Source_image& request, ::eye_grpc::FeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImgFeature_, context, request, response);
}

void IFS_SourceData::Stub::experimental_async::ImgFeature(::grpc::ClientContext* context, const ::eye_grpc::Source_image* request, ::eye_grpc::FeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ImgFeature_, context, request, response, std::move(f));
}

void IFS_SourceData::Stub::experimental_async::ImgFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eye_grpc::FeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ImgFeature_, context, request, response, std::move(f));
}

void IFS_SourceData::Stub::experimental_async::ImgFeature(::grpc::ClientContext* context, const ::eye_grpc::Source_image* request, ::eye_grpc::FeatureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ImgFeature_, context, request, response, reactor);
}

void IFS_SourceData::Stub::experimental_async::ImgFeature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eye_grpc::FeatureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ImgFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::eye_grpc::FeatureResponse>* IFS_SourceData::Stub::AsyncImgFeatureRaw(::grpc::ClientContext* context, const ::eye_grpc::Source_image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::eye_grpc::FeatureResponse>::Create(channel_.get(), cq, rpcmethod_ImgFeature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::eye_grpc::FeatureResponse>* IFS_SourceData::Stub::PrepareAsyncImgFeatureRaw(::grpc::ClientContext* context, const ::eye_grpc::Source_image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::eye_grpc::FeatureResponse>::Create(channel_.get(), cq, rpcmethod_ImgFeature_, context, request, false);
}

IFS_SourceData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFS_SourceData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFS_SourceData::Service, ::eye_grpc::SourceData, ::eye_grpc::AddResponse>(
          std::mem_fn(&IFS_SourceData::Service::Add), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IFS_SourceData_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IFS_SourceData::Service, ::eye_grpc::Source_image, ::eye_grpc::FeatureResponse>(
          std::mem_fn(&IFS_SourceData::Service::ImgFeature), this)));
}

IFS_SourceData::Service::~Service() {
}

::grpc::Status IFS_SourceData::Service::Add(::grpc::ServerContext* context, const ::eye_grpc::SourceData* request, ::eye_grpc::AddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IFS_SourceData::Service::ImgFeature(::grpc::ServerContext* context, const ::eye_grpc::Source_image* request, ::eye_grpc::FeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace eye_grpc

