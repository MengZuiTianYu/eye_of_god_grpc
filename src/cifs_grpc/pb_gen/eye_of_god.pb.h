// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eye_of_god.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eye_5fof_5fgod_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eye_5fof_5fgod_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eye_5fof_5fgod_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eye_5fof_5fgod_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eye_5fof_5fgod_2eproto;
namespace eye_grpc {
class AddResponse;
class AddResponseDefaultTypeInternal;
extern AddResponseDefaultTypeInternal _AddResponse_default_instance_;
class FeatureResponse;
class FeatureResponseDefaultTypeInternal;
extern FeatureResponseDefaultTypeInternal _FeatureResponse_default_instance_;
class SourceData;
class SourceDataDefaultTypeInternal;
extern SourceDataDefaultTypeInternal _SourceData_default_instance_;
class Source_image;
class Source_imageDefaultTypeInternal;
extern Source_imageDefaultTypeInternal _Source_image_default_instance_;
}  // namespace eye_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::eye_grpc::AddResponse* Arena::CreateMaybeMessage<::eye_grpc::AddResponse>(Arena*);
template<> ::eye_grpc::FeatureResponse* Arena::CreateMaybeMessage<::eye_grpc::FeatureResponse>(Arena*);
template<> ::eye_grpc::SourceData* Arena::CreateMaybeMessage<::eye_grpc::SourceData>(Arena*);
template<> ::eye_grpc::Source_image* Arena::CreateMaybeMessage<::eye_grpc::Source_image>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eye_grpc {

// ===================================================================

class SourceData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eye_grpc.SourceData) */ {
 public:
  SourceData();
  virtual ~SourceData();

  SourceData(const SourceData& from);
  SourceData(SourceData&& from) noexcept
    : SourceData() {
    *this = ::std::move(from);
  }

  inline SourceData& operator=(const SourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceData& operator=(SourceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceData* internal_default_instance() {
    return reinterpret_cast<const SourceData*>(
               &_SourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SourceData* other);
  friend void swap(SourceData& a, SourceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData* New() const final {
    return CreateMaybeMessage<SourceData>(nullptr);
  }

  SourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceData& from);
  void MergeFrom(const SourceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eye_grpc.SourceData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eye_5fof_5fgod_2eproto);
    return ::descriptor_table_eye_5fof_5fgod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string source_name = 2;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 2;
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);

  // string uuid = 3;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // string rule = 6;
  void clear_rule();
  static const int kRuleFieldNumber = 6;
  const std::string& rule() const;
  void set_rule(const std::string& value);
  void set_rule(std::string&& value);
  void set_rule(const char* value);
  void set_rule(const char* value, size_t size);
  std::string* mutable_rule();
  std::string* release_rule();
  void set_allocated_rule(std::string* rule);

  // int32 source_type = 1;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gpu_id = 4;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 valid = 5;
  void clear_valid();
  static const int kValidFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 valid() const;
  void set_valid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:eye_grpc.SourceData)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eye_5fof_5fgod_2eproto;
};
// -------------------------------------------------------------------

class AddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eye_grpc.AddResponse) */ {
 public:
  AddResponse();
  virtual ~AddResponse();

  AddResponse(const AddResponse& from);
  AddResponse(AddResponse&& from) noexcept
    : AddResponse() {
    *this = ::std::move(from);
  }

  inline AddResponse& operator=(const AddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResponse& operator=(AddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddResponse* internal_default_instance() {
    return reinterpret_cast<const AddResponse*>(
               &_AddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddResponse* other);
  friend void swap(AddResponse& a, AddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddResponse* New() const final {
    return CreateMaybeMessage<AddResponse>(nullptr);
  }

  AddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResponse& from);
  void MergeFrom(const AddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eye_grpc.AddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eye_5fof_5fgod_2eproto);
    return ::descriptor_table_eye_5fof_5fgod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 results = 1;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 results() const;
  void set_results(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gpu_id = 2;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 valid = 3;
  void clear_valid();
  static const int kValidFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 valid() const;
  void set_valid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:eye_grpc.AddResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 results_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eye_5fof_5fgod_2eproto;
};
// -------------------------------------------------------------------

class Source_image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eye_grpc.Source_image) */ {
 public:
  Source_image();
  virtual ~Source_image();

  Source_image(const Source_image& from);
  Source_image(Source_image&& from) noexcept
    : Source_image() {
    *this = ::std::move(from);
  }

  inline Source_image& operator=(const Source_image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source_image& operator=(Source_image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Source_image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source_image* internal_default_instance() {
    return reinterpret_cast<const Source_image*>(
               &_Source_image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Source_image* other);
  friend void swap(Source_image& a, Source_image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source_image* New() const final {
    return CreateMaybeMessage<Source_image>(nullptr);
  }

  Source_image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Source_image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Source_image& from);
  void MergeFrom(const Source_image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source_image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eye_grpc.Source_image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eye_5fof_5fgod_2eproto);
    return ::descriptor_table_eye_5fof_5fgod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // string rule = 4;
  void clear_rule();
  static const int kRuleFieldNumber = 4;
  const std::string& rule() const;
  void set_rule(const std::string& value);
  void set_rule(std::string&& value);
  void set_rule(const char* value);
  void set_rule(const char* value, size_t size);
  std::string* mutable_rule();
  std::string* release_rule();
  void set_allocated_rule(std::string* rule);

  // int32 feature_type = 2;
  void clear_feature_type();
  static const int kFeatureTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_type() const;
  void set_feature_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gpu_id = 3;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:eye_grpc.Source_image)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_;
  ::PROTOBUF_NAMESPACE_ID::int32 feature_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eye_5fof_5fgod_2eproto;
};
// -------------------------------------------------------------------

class FeatureResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eye_grpc.FeatureResponse) */ {
 public:
  FeatureResponse();
  virtual ~FeatureResponse();

  FeatureResponse(const FeatureResponse& from);
  FeatureResponse(FeatureResponse&& from) noexcept
    : FeatureResponse() {
    *this = ::std::move(from);
  }

  inline FeatureResponse& operator=(const FeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureResponse& operator=(FeatureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureResponse* internal_default_instance() {
    return reinterpret_cast<const FeatureResponse*>(
               &_FeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FeatureResponse* other);
  friend void swap(FeatureResponse& a, FeatureResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureResponse* New() const final {
    return CreateMaybeMessage<FeatureResponse>(nullptr);
  }

  FeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureResponse& from);
  void MergeFrom(const FeatureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eye_grpc.FeatureResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eye_5fof_5fgod_2eproto);
    return ::descriptor_table_eye_5fof_5fgod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // string feature = 4;
  void clear_feature();
  static const int kFeatureFieldNumber = 4;
  const std::string &feature(const char *string) const;
  void set_feature(const std::string& value);
  void set_feature(std::string&& value);
  void set_feature(const char* value);
  void set_feature(const char* value, size_t size);
  std::string* mutable_feature();
  std::string* release_feature();
  void set_allocated_feature(std::string* feature);

  // int32 results = 2;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 results() const;
  void set_results(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gpu_id = 3;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:eye_grpc.FeatureResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_;
  ::PROTOBUF_NAMESPACE_ID::int32 results_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eye_5fof_5fgod_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceData

// int32 source_type = 1;
inline void SourceData::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceData::source_type() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.source_type)
  return source_type_;
}
inline void SourceData::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.source_type)
}

// string source_name = 2;
inline void SourceData::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SourceData::source_name() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.source_name)
  return source_name_.GetNoArena();
}
inline void SourceData::set_source_name(const std::string& value) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.source_name)
}
inline void SourceData::set_source_name(std::string&& value) {
  
  source_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.SourceData.source_name)
}
inline void SourceData::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.SourceData.source_name)
}
inline void SourceData::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.SourceData.source_name)
}
inline std::string* SourceData::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.SourceData.source_name)
  return source_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceData::release_source_name() {
  // @@protoc_insertion_point(field_release:eye_grpc.SourceData.source_name)
  
  return source_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceData::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.SourceData.source_name)
}

// string uuid = 3;
inline void SourceData::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SourceData::uuid() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.uuid)
  return uuid_.GetNoArena();
}
inline void SourceData::set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.uuid)
}
inline void SourceData::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.SourceData.uuid)
}
inline void SourceData::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.SourceData.uuid)
}
inline void SourceData::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.SourceData.uuid)
}
inline std::string* SourceData::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.SourceData.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceData::release_uuid() {
  // @@protoc_insertion_point(field_release:eye_grpc.SourceData.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.SourceData.uuid)
}

// int32 gpu_id = 4;
inline void SourceData::clear_gpu_id() {
  gpu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceData::gpu_id() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.gpu_id)
  return gpu_id_;
}
inline void SourceData::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.gpu_id)
}

// int32 valid = 5;
inline void SourceData::clear_valid() {
  valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceData::valid() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.valid)
  return valid_;
}
inline void SourceData::set_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.valid)
}

// string rule = 6;
inline void SourceData::clear_rule() {
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SourceData::rule() const {
  // @@protoc_insertion_point(field_get:eye_grpc.SourceData.rule)
  return rule_.GetNoArena();
}
inline void SourceData::set_rule(const std::string& value) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.SourceData.rule)
}
inline void SourceData::set_rule(std::string&& value) {
  
  rule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.SourceData.rule)
}
inline void SourceData::set_rule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.SourceData.rule)
}
inline void SourceData::set_rule(const char* value, size_t size) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.SourceData.rule)
}
inline std::string* SourceData::mutable_rule() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.SourceData.rule)
  return rule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SourceData::release_rule() {
  // @@protoc_insertion_point(field_release:eye_grpc.SourceData.rule)
  
  return rule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SourceData::set_allocated_rule(std::string* rule) {
  if (rule != nullptr) {
    
  } else {
    
  }
  rule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.SourceData.rule)
}

// -------------------------------------------------------------------

// AddResponse

// int32 results = 1;
inline void AddResponse::clear_results() {
  results_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddResponse::results() const {
  // @@protoc_insertion_point(field_get:eye_grpc.AddResponse.results)
  return results_;
}
inline void AddResponse::set_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  results_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.AddResponse.results)
}

// int32 gpu_id = 2;
inline void AddResponse::clear_gpu_id() {
  gpu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddResponse::gpu_id() const {
  // @@protoc_insertion_point(field_get:eye_grpc.AddResponse.gpu_id)
  return gpu_id_;
}
inline void AddResponse::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.AddResponse.gpu_id)
}

// int32 valid = 3;
inline void AddResponse::clear_valid() {
  valid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddResponse::valid() const {
  // @@protoc_insertion_point(field_get:eye_grpc.AddResponse.valid)
  return valid_;
}
inline void AddResponse::set_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.AddResponse.valid)
}

// -------------------------------------------------------------------

// Source_image

// string file_name = 1;
inline void Source_image::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Source_image::file_name() const {
  // @@protoc_insertion_point(field_get:eye_grpc.Source_image.file_name)
  return file_name_.GetNoArena();
}
inline void Source_image::set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.Source_image.file_name)
}
inline void Source_image::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.Source_image.file_name)
}
inline void Source_image::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.Source_image.file_name)
}
inline void Source_image::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.Source_image.file_name)
}
inline std::string* Source_image::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.Source_image.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Source_image::release_file_name() {
  // @@protoc_insertion_point(field_release:eye_grpc.Source_image.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Source_image::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.Source_image.file_name)
}

// int32 feature_type = 2;
inline void Source_image::clear_feature_type() {
  feature_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Source_image::feature_type() const {
  // @@protoc_insertion_point(field_get:eye_grpc.Source_image.feature_type)
  return feature_type_;
}
inline void Source_image::set_feature_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  feature_type_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.Source_image.feature_type)
}

// int32 gpu_id = 3;
inline void Source_image::clear_gpu_id() {
  gpu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Source_image::gpu_id() const {
  // @@protoc_insertion_point(field_get:eye_grpc.Source_image.gpu_id)
  return gpu_id_;
}
inline void Source_image::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.Source_image.gpu_id)
}

// string rule = 4;
inline void Source_image::clear_rule() {
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Source_image::rule() const {
  // @@protoc_insertion_point(field_get:eye_grpc.Source_image.rule)
  return rule_.GetNoArena();
}
inline void Source_image::set_rule(const std::string& value) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.Source_image.rule)
}
inline void Source_image::set_rule(std::string&& value) {
  
  rule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.Source_image.rule)
}
inline void Source_image::set_rule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.Source_image.rule)
}
inline void Source_image::set_rule(const char* value, size_t size) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.Source_image.rule)
}
inline std::string* Source_image::mutable_rule() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.Source_image.rule)
  return rule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Source_image::release_rule() {
  // @@protoc_insertion_point(field_release:eye_grpc.Source_image.rule)
  
  return rule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Source_image::set_allocated_rule(std::string* rule) {
  if (rule != nullptr) {
    
  } else {
    
  }
  rule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.Source_image.rule)
}

// -------------------------------------------------------------------

// FeatureResponse

// string file_name = 1;
inline void FeatureResponse::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FeatureResponse::file_name() const {
  // @@protoc_insertion_point(field_get:eye_grpc.FeatureResponse.file_name)
  return file_name_.GetNoArena();
}
inline void FeatureResponse::set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.FeatureResponse.file_name)
}
inline void FeatureResponse::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.FeatureResponse.file_name)
}
inline void FeatureResponse::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.FeatureResponse.file_name)
}
inline void FeatureResponse::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.FeatureResponse.file_name)
}
inline std::string* FeatureResponse::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.FeatureResponse.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeatureResponse::release_file_name() {
  // @@protoc_insertion_point(field_release:eye_grpc.FeatureResponse.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureResponse::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.FeatureResponse.file_name)
}

// int32 results = 2;
inline void FeatureResponse::clear_results() {
  results_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureResponse::results() const {
  // @@protoc_insertion_point(field_get:eye_grpc.FeatureResponse.results)
  return results_;
}
inline void FeatureResponse::set_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  results_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.FeatureResponse.results)
}

// int32 gpu_id = 3;
inline void FeatureResponse::clear_gpu_id() {
  gpu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureResponse::gpu_id() const {
  // @@protoc_insertion_point(field_get:eye_grpc.FeatureResponse.gpu_id)
  return gpu_id_;
}
inline void FeatureResponse::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:eye_grpc.FeatureResponse.gpu_id)
}

// string feature = 4;
inline void FeatureResponse::clear_feature() {
  feature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string & FeatureResponse::feature(const char *string) const {
  // @@protoc_insertion_point(field_get:eye_grpc.FeatureResponse.feature)
  return feature_.GetNoArena();
}
inline void FeatureResponse::set_feature(const std::string& value) {
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eye_grpc.FeatureResponse.feature)
}
inline void FeatureResponse::set_feature(std::string&& value) {
  
  feature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eye_grpc.FeatureResponse.feature)
}
inline void FeatureResponse::set_feature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eye_grpc.FeatureResponse.feature)
}
inline void FeatureResponse::set_feature(const char* value, size_t size) {
  
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eye_grpc.FeatureResponse.feature)
}
inline std::string* FeatureResponse::mutable_feature() {
  
  // @@protoc_insertion_point(field_mutable:eye_grpc.FeatureResponse.feature)
  return feature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeatureResponse::release_feature() {
  // @@protoc_insertion_point(field_release:eye_grpc.FeatureResponse.feature)
  
  return feature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureResponse::set_allocated_feature(std::string* feature) {
  if (feature != nullptr) {
    
  } else {
    
  }
  feature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:eye_grpc.FeatureResponse.feature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eye_grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eye_5fof_5fgod_2eproto
